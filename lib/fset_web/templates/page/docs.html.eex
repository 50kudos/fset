<%= render FsetWeb.LayoutView, "_header.html", assigns %>

<div class="bg-gray-900 flex">
  <nav class="md:w-1/4 px-4 py-8">
    <ul class="sticky top-8">
      <li class="mt-6 mb-2 text-gray-400 font-light tracking-wide">Concept</li>
      <li><%= link "What is FSet", to: "#what_is" %></li>
      <li><%= link "FModel Concept", to: "#fmodel_concept" %></li>
      <li><%= link "Files and Ref", to: "#files" %></li>
      <li><%= link "Entrypoint", to: "#entrypoint" %></li>
      <li class="mt-6 mb-2 text-gray-400 font-light tracking-wide">References</li>
      <li class="mt-3 mb-1 text-gray-400 text-sm font-light tracking-wide">Export</li>
      <li><%= link "JSON Schema", to: "#export_json_schema" %></li>
      <li><%= link "JTD", to: "#export_jtd" %></li>
      <li class="mt-3 mb-1 text-gray-400 text-sm font-light tracking-wide">Import</li>
      <li><%= link "JSON Schema", to: "#import_json_schema" %></li>
      <li><%= link "JTD", to: "#import_jtd" %></li>
      <li><%= link "JSON", to: "#import_json" %></li>
    </ul>
  </nav>
  <article class="md:w-3/5 px-4 py-8 font-light tracking-wide">
    <h3 id="what_is" class="my-2 text-xl font-semibold text-pink-500">What is FSet</h3>
    <p>FSet is a linked shallow tree structure GUI editor that produces schema and data.</p>

    <div class="my-8">
      <p class="my-2">FSet has two products:</p>
      <ul class="space-y-2 list-decimal px-4">
        <li>
          <b class="font-bold">FModel</b> :
          A schema editor that helps you model and author schema. FModel currently exports
          <a href="https://json-schema.org/" class="underline text-blue-500" target="_blank">JSON Schema</a> or
          <a href="https://jsontypedef.com/" class="underline text-blue-500" target="_blank">JTD (JSON Type Definition)</a>
          This is for system owners who provide schema to their users.
        </li>
        <li>
          <b class="font-bold">FData</b> <span class="text-gray-500">(not yet publicly available, early phase of development)</span> :
          A data constructor based on provived schema. This is for users who provide data to system conforming provided schema.
        </li>
      </ul>
    </div>

    <h3 id="fmodel_concept" class="my-2 text-xl font-semibold text-pink-500">FModel Concept</h3>
    <p>
      While a schema is consisted of composite data type (inspired by <a href="https://en.wikipedia.org/wiki/Algebraic_data_type" class="underline text-blue-500" target="_blank"> Algebraic Data Type</a>), FModel GUI core concept is rather about structural constraints.
    </p>
    <div class="my-8 space-y-4">
      <div>
        <h5 class="my-1">A container that contains keyed elements can represent types:</h5>
        <ul class="list-disc list-inside px-4">
          <li>Record</li>
          <li>Tagged Union</li>
        </ul>
      </div>
      <div>
        <h5 class="my-1">A container that contains indexed elements can represent types:</h5>
        <ul class="list-disc list-inside px-4">
          <li>Tuple</li>
          <li>Untagged Union</li>
        </ul>
      </div>
      <div>
        <h5 class="my-1">A container that contains only one element can represent types:</h5>
        <ul class="list-disc list-inside px-4">
          <li>List</li>
        </ul>
      </div>
      <div>
        <h5 class="my-1">A container that contains two elements can represent types:</h5>
        <ul class="list-disc list-inside px-4">
          <li>Dict</li>
          <li>Extensible Record</li>
        </ul>
      </div>
      <div>
        <h5 class="my-1">A leaf elements can represent types:</h5>
        <ul class="list-disc list-inside px-4">
          <li>String</li>
          <li>Boolean</li>
          <li>Null</li>
          <li>Number</li>
          <li>Ref</li>
          <li>Any</li>
          <li>Value</li>
        </ul>
      </div>
    </div>

    <p class="my-4">
      Type only has meaning when it gets exported.
      For example, a "record" is exported as "object" in JSON Schema. It could be exported as any type that has this structural constraint (i.e. fixed children, each child has one key).
      If your export target is JSON Type Definition, it's very similiar concept, a "record" will be exported as "Properties" form.
    </p>
    <p class="my-4">
      Another example is, Union and Tuple have the same structure which is a container that contains indexed elements. We display type on GUI for ease of recognizing structure. Again, the only time that type matters is when it gets exported. Union can be exported as "anyOf" in JSON Schema while Tuple is exported as "array" with container name "prefixItems" in JSON Schema.
    </p>
    <p class="my-4">
      Therefore, FModel itself has no type nor syntax (we can display however we want, though we display it like text mode because of familiarity and cleanliness).
      So, there is no schema language introduced here, there are many schema languages out there.
      However, it's easier to think a bit higher level which is thinking in terms of type.
      We provide ease of constructing schema, automated features and documentation.
    </p>

    <div class="my-8">
      <h3 id="files" class="my-2 text-xl font-semibold text-pink-500">Files and Ref</h3>
      <h5>Files</h5>
      <p>
        FModel has a logical group called "file". You can also think of it as a module.
        A file contains fmodels (i.e. top level types). File name can be used as a prefix for type name at export.
        Currently, list of files are flat, there is no folder for now. It's enough for majority of schema today
        (however, we will have a way to group files in future)
      </p>
      <br>
      <h5>Ref</h5>
      <p>
        A Ref type can refer across logical files.
      </p>
    </div>

    <div class="my-8">
      <h3 id="entrypoint" class="my-2 text-xl font-semibold text-pink-500">Entrypoint</h3>
      <p>
        FModel currently support 1 entrypoint.
        A fmodel can be marked as entrypoint and it will be exported to root level of JSON Schema,
        the rest of fmodels will go under "$defs" keyword (currently no tree shaking)
      </p>
    </div>

    <hr class="border-gray-800">
    <h2 class="my-8 text-2xl font-light text-gray-400 tracking-wide">References</h3>
    <div class="my-8">
      <h3 class="my-2 text-xl font-semibold text-pink-500">Export</h3>
      <h4 id="export_json_schema" class="my-2 text-lg">JSON Schema (draft 2020-12)</h4>
    </div>
  </article>
</div>
