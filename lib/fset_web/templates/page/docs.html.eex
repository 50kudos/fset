<div class="flex flex-col min-h-screen">
  <%= render FsetWeb.LayoutView, "_header.html", assigns %>

  <div class="bg-gray-900 flex flex-wrap flex-1">
    <nav class="md:w-1/4 px-4 py-8 flex justify-center h-full md:sticky md:top-8">
      <ul>
        <li class="mt-6 mb-2 text-indigo-500 tracking-wide">Concept</li>
        <li><%= link "What is FSET", class: "px1", to: "#what_is" %></li>
        <li class="mt-6 mb-2"></li>
        <li><%= link "FModel", class: "px1", to: "#fmodel_concept" %></li>
        <li><%= link "Module and Ref", class: "px1", to: "#modules" %></li>
        <li><%= link "Entrypoint", class: "px1", to: "#entrypoint" %></li>
        <li class="mt-6 mb-2 text-indigo-500 tracking-wide">References</li>
        <li class="mt-3 mb-1 text-gray-400 text-sm font-light tracking-wide">Export</li>
        <li><%= link "FModel to JSON Schema", class: "px1", to: "#fmodel_to_json_schema" %></li>
        <li class="mt-3 mb-1 text-gray-400 text-sm font-light tracking-wide">Import</li>
        <li><%= link "JSON Schema to FModel", class: "px1", to: "#json_schema_to_fmodel" %></li>
        <li class="mt-6 mb-2"></li>
        <li><%= link "Keyboard Commands", class: "px1", to: "#kbd" %></li>
      </ul>
    </nav>
    <section id="body" class="md:w-3/5 flex flex-col px-4 py-8 font-light tracking-wide leading-relaxed text-justify">
      <article id="what_is">
        <h3 class="my-2 text-xl font-semibold text-pink-500">What is FSET</h3>
        <p>FSET is a shallow tree structure editor that produces target data, with simple modular composability</p>

        <div class="my-8">
          <p class="my-2">FSET's products:</p>
          <ul class="space-y-2 list-decimal px-4">
            <li>
              <b class="font-bold">FModel</b> :
              A schema editor that helps system owners model and author <a href="https://json-schema.org/" class="underline text-blue-500" target="_blank">JSON Schema</a>
              using a nice subset for data modeling
            </li>
        </div>
      </article>

      <article id="fmodel_concept">
        <h3 class="my-2 text-xl font-semibold text-pink-500">FModel</h3>
        <p>
          FModel's visual is inspired by <a href="https://en.wikipedia.org/wiki/Algebraic_data_type" class="underline text-blue-500" target="_blank">Algebraic Data Type</a> to
          represent type definition with block based structural constraints.
        </p>

        <div class="mt-4">
          <p>A fmodel example:</p>
          <def-fmodel data-name="ex_1" data-sch="<%= @docs.ex_1 %>">
            <pre class="text-sm hidden"><%= """
            type VConcatSpec<GenericSpec> = {   }
                bounds : ||
                    | "full"
                    | "flush"
                center : bool
                data : ||
                    | D :: Data
                    | null
                description : string
                name : string
                resolve : R :: Resolve
                spacing : float_64
                title : ||
                    | T :: Text
                    | T :: TitleParams
                transform : [  T :: Transform  ]
                vconcat : [  S :: Spec  ]
            """%></pre>
          </def-fmodel>
          <p class="text-xs text-center text-gray-500"><i>A fmodel encodes a json schema definition, source: <a href="https://github.com/vega/schema" target="_blank">https://github.com/vega/schema</a></i></p>
        </div>

        <p class="my-4">
          FModel itself has no syntax (it can be displayed however html is capable of, though FModel displays it like text based because of familiarity and cleanliness; text and symbols are already great).
          So, there is no schema language introduced here, and no syntax errors (one would argue that a little bit of allowed mistakes enables more productivity).
          It's like editting high level AST where each node is a semantic block. A block represents a target data.
          However, it's easier to model stuff when we think in terms of type.
          In the end fmodels get exported as definitions along with a root schema starting from an <a href="#entrypoint" class="underline text-blue-500">entrypoint</a>.
          FModel provides ease of constructing schema, constraints that prevent errors, automated features and documentation.
        </p>

        <div class="my-4">
          <h3 class="my-2 text-gray-500 font-normal">Why not use JSON Schema keywords directly?</h3>
          JSON Schema is a set of constraints based keywords, not only it contains "if", "then, "else", but also its keyword independence nature.
          That means a cartesian product of all keywords is enormous, like you can freely compose a bunch of logic gates encoding business rules at schema level.
          It's expressive, but you will be inclined to put logics that should rather be at application level in there. That does not fit data modeling mental model (something that is not a model of data may look like configuration or parameters)
          FModel picks a nice subset of it and provides visual representation (and block constraints) that guides our brain to think in terms of model and type over logical constraints. In our observation, majority of JSON Schema users have used it this way all along,
          but there is still a lot of confusion, especially for newcomers, trying to mix and match to form rules that are not sane.
        </div>

        <div class="my-4">
          <h3 class="my-2 text-gray-500 font-normal underline">Goals</h3>
          While FModel helps system developers author schema in "data modeling" way, it still uses standard JSON Schema
          <a href="https://json-schema.org/draft/2020-12/json-schema-validation.html#rfc.section.6" target="_blank" class="text-blue-500">Vocabulary</a> without customization or our own vocabulary.
          So it's still in <b class="font-semibold text-yellow-500">"Validation"</b> category, not in <b class="font-semibold text-yellow-500">"Code Generation"</b> category because validation is what JSON Schema is designed for.
          So today, FModel only exports JSON Schema original vocabulary (based on  <a href="https://json-schema.org/draft/2020-12/json-schema-validation.html" target="_blank" class="text-blue-500">draft/2020-12</a>, <i class="italic">"Each release of the JSON schema specification is treated as a production release"</i>).
          FModel output schema is suitable for configuration validation, api request / respond body, and also data shape like <a href="https://vega.github.io/vega-lite" target="_blank" class="text-blue-500">data visualization</a> grammar.
          <br>
          <br>
          Generally speaking, FModel exports standard, widely adopted, data modeling schema in json format.
          There is <a href="https://datatracker.ietf.org/doc/html/rfc8927" class="text-blue-500" target="_blank">JSON Type Definition (rfc8927)</a> which is designed for <b class="font-semibold">code generation</b>, if there is enough
          demand, FModel could also export JTD, though we would have yet another standard because code generation under JSON Schema umbrella, they just <a href="https://github.com/json-schema-org/community/discussions/18" class="text-blue-500" target="_blank">started developing it</a> and FModel will export that as well when some releases come out.
        </div>

        <div class="my-4">
          <h3 class="my-2 text-gray-500 font-normal">How about non JSON and/or binary format export?</h3>
          No Plan!
        </div>
      </article>

      <article id="modules" class="my-8">
        <h3 class="my-2 text-xl font-semibold text-pink-500">Module and Ref</h3>
        <h5 class="font-semibold">Module</h5>
        <p>
          FModel has a logical group called "modu", stands for module (naming is not a big deal it's just short enough for good noise/signal ratio visually).
          A module contains a list of fmodels (i.e. top level types). That's it. Not as much as a "module system". Module name is used with fmodel name at export.
          Currently, a list of module is flat, there is no folder for now. It's enough for majority of schema today
          (however, the editor will have a way to group module in future, maybe something like scoped labels, because module and ref belong to FSET that will also have other kind of editors)
        </p>
        <br>
        <h5 class="font-semibold">Ref</h5>
        <p>
          A Ref type can refer to a fmodel across modules. It also provides a simple referential integrity enforced at database level (i.e. Postgresql's foreign key constraint),
          if a fmodel is being referenced, it's not removable. Ref name automatically reflects referenced fmodel name and namespace when type is updated or moved between modules.
        </p>
      </article>

      <article id="entrypoint" class="my-8">
        <h3 class="my-2 text-xl font-semibold text-pink-500">Entrypoint</h3>
        <p>
          FModel currently support 1 entrypoint at a time when export as a single file schema.
          A fmodel can be marked as entrypoint, and it will be exported to root level of JSON Schema of its own module,
          the rest of fmodels will go under "$defs" keyword (currently, without tree shaking; unused defs elimination) each with module name namespace.
        </p>
      </article>

      <hr class="border-gray-800">

      <article id="fmodel_to_json_schema" class="docsref my-8">
        <h2 class="my-8 text-2xl font-light text-gray-400 tracking-wide">References</h3>
        <h3 class="my-2 text-xl font-semibold text-pink-500">Export</h3>
        <h4 class="my-2 text-lg">FModel to JSON Schema <a href="https://json-schema.org/specification-links.html#2020-12" target="_blank" class="text-blue-500">(draft 2020-12)</a></h4>
        <p>
          FModel uses a stable subset of draft-2020-12; keywords that have been through from several previous releases to latest release.
          It would probably have some new keywords in future draft if that's useful in data modeling. Ideally, we do not ever remove keywords especially ones that strengthen constraints (i.e. fail a validation that's previously passed)
        </p>
        <div class="my-8 space-y-4">
          <ul class="space-y-6">
            <%= for fmodel_tree <- @docs.fmodels do %>
              <li>
                <p class="underline" style="text-decoration-color: var(--gray-600)"><%= get_in(fmodel_tree, ["fields", Access.at(0), "export", "title"]) %></p>
                <div class="flex flex-wrap">
                  <div class="flex flex-col w-full md:w-1/2">
                    <def-fmodel data-name="<%= get_in(fmodel_tree, ["fields", Access.at(0), "key"]) %>" data-sch="<%= Jason.encode!(fmodel_tree) %>"></def-fmodel>
                    <article class="p-1 text-left">
                      <%= {:safe, Earmark.as_html!(get_in(fmodel_tree, ["fields", Access.at(0), "export", "description"]) || "")} %>
                    </article>
                  </div>
                  <code class="flex mt-4 md:pl-2 w-full md:w-1/2">
                    <pre class="p-2 text-sm text-left w-full bg-matte-black border border-gray-800 rounded-lg whitespace-pre-wrap overflow-x-scroll">
                      <%= get_in(fmodel_tree, ["fields", Access.at(0), Access.key("export", %{})]) |> Map.drop(["description", "title"]) |> Jason.encode!(pretty: true) %>
                    </pre>
                  </code>
                </div>
              </li>
            <% end %>
          </ul>
        </div>
      </article>

      <article id="json_schema_to_fmodel" class="docsref my-8">
        <h3 class="my-2 text-xl font-semibold text-pink-500">Import</h3>
        <h4 class="my-2 text-lg">JSON Schema <a href="https://json-schema.org/specification-links.html#2020-12" target="_blank" class="text-blue-500">(draft 2020-12)</a> to FModel</h4>
        <p>
          Purpose of FModel Import is for "getting started" quickly from existing schema.
          Imported schema is NOT going to be lossless. We expect `draft 2020-12`, but our chosen keywords are likely what you are already using; those stable ones.
        </p>
        <br>
        <p>
          Output from <%= link "FModel to JSON Schema", class: "px1", to: "#fmodel_to_json_schema" %> section is expected to be input.
          If source schema file's `$defs` or `definitions` name has namespace, import will try to group by that namespace,
          for example, "AWS_ACMPCA_Policy". "AWS_ACMPCA" is going to be module name, "Policy" is going to be one of module's fmodels.
          By default, imported definitions are grouped by first character.
        </p>
      </article>

      <article id="kbd" class="docsref my-8">
      <h3 class="my-2 text-xl font-semibold text-pink-500">Keyboard commands</h3>
        <%= render FsetWeb.ProjectView, "_help.html" %>
      </article>
    </section>
  </div>

  <%= render FsetWeb.LayoutView, "_footer.html", assigns %>
</div>
