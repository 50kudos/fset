<header class="flex flex-col items-center pt-12 overflow-hidden">
  <h1 class="leading-10 text-5xl font-thin font-mono tracking-widest text-pink-500">FSET</h1>
  <h2 class="leading-loose text-3xl font-thin tracking-widest">Structure Editor Series</h2>

  <div class="my-4 container mx-auto font-thin tracking-wide flex flex-col justify-between items-baseline px-2 md:px-0">
    <p class="text-2xl">
      <mark class="px-1 font-medium bg-indigo-500 tracking-wider">FModel</mark>
      JSON Schema Editor
    </p>
    <p class="text-lg my-2">No longer write raw schema by hand, no programming tooling required</p>
  </div>

  <div class="flex mx-auto">
    <div class="rounded-tl-full rounded-bl-full -ml-36">
      <%= img_tag Routes.static_path(@conn, "/images/fset-ico.svg"), alt: "fset icon", class: "hidden sm:block" %>
    </div>
    <div class="flex flex-col">
      <%= img_tag Routes.static_path(@conn, "/images/landing.png"), alt: "editor overview", class: "min-w-full" %>
      <div class="flex justify-between 2xl:relative">
        <ul class="flex flex-col flex-shrink-0 xl:ml- py-2 my-0.5 mx-1">
          <li><%= link "Register", to: Routes.user_registration_path(@conn, :new) %></li>
          <li><%= link "Log in", to: Routes.user_session_path(@conn, :new) %></li>
        </ul>
        <p class="mb-4 px-4 py-3 text-sm right-0 absolute">
          <span class="mr-2 text-gray-400">Example data from</span>
          <%= link "https://vega.github.io", to: "https://vega.github.io", class: "my-1 tracking-wider text-blue-500", target: "_black" %>
        </p>
      </div>
    </div>
  </div>

  <div class="flex justify-between">
    <div class="hidden md:block"></div>
    <div class="flex flex-col items-center">
      <ul class="flex space-x-4 flex-shrink-0 xl:ml- py-2 my-0.5 mx-1 sm:hidden">
        <li><%= link "Register", to: Routes.user_registration_path(@conn, :new) %></li>
        <li><%= link "Log in", to: Routes.user_session_path(@conn, :new) %></li>
      </ul>
      <%= link "Documentation", to: Routes.page_path(@conn, :docs), class: "my-1 tracking-wider", target: "_black" %>
      <%= link "Pricing", to: Routes.page_path(@conn, :pricing), class: "my-1 tracking-wider", target: "_black" %>

      <%= form_for :project, Routes.project_path(@conn, :create), [method: :post], fn _f -> %>
        <%= submit "Create Project", class: "mt-8 px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-lg text-gray-100 focus:outline-none focus:ring-2 focus:ring-indigo-400" %>
      <% end %>
    </div>
  </div>

</header>
<hr class="border-t border-pink-500 w-12 mx-auto my-12">
<section class="landing-page container mx-auto">
  <div class="flex flex-wrap font-thin">
    <p class="my-4 w-full px-2 text-3xl tracking-wide text-gray-100">Algebraic Data Type to JSON Schema</p>
    <p class="my-2 px-2 text-lg">Think in terms of algebraic data type, export sane subset of json schema <span class="text-base">( see <a href="<%= Routes.page_path(@conn, :docs) <> "#fmodel_to_json_schema" %>" class="text-blue-500" target="_blank">all types</a> )</span></p>
    <%= render "_fmodel_examples.html", assigns %>
  </div>

</section>
<hr class="border-t border-pink-500 w-12 mx-auto my-12">
<section class="landing-page container mx-auto">
  <div class="flex flex-wrap font-thin">
    <p class="my-4 w-full px-2 text-3xl tracking-wide text-gray-100">Constructing schema as productive as working in text editor</p>
    <p class="my-2 px-2 text-lg">With essential keyboard commands <span class="text-base">( see <a href="<%= Routes.page_path(@conn, :docs) <> "#kbd" %>" class="text-blue-500" target="_blank">all commands</a> )</span></p>
    <%= render FsetWeb.ProjectView, "_help.html" %>
  </div>
</section>
<hr class="border-t border-pink-500 w-12 mx-auto my-12">
<section class="container mx-auto">
  <div class="font-thin">
    <p class="my-4 w-full px-2 text-3xl tracking-wide text-gray-100">Reference tracking and integrity</p>
    <p class="my-2 px-2 text-lg">Once a type is referenced, name and namespace updates automatically reflects on referrers</p>
    <p class="my-2 px-2 text-lg">When there exists at least one referrer, the referenced type cannot be deleted, enforced at db-level</p>
  </div>
  <%= img_tag Routes.static_path(@conn, "/images/refs-tracking.png"), alt: "reference tracking", class: "block py-8 max-w-full" %>
</section>
<hr class="border-t border-pink-500 w-12 mx-auto my-12">
<section class="container mx-auto">
  <div class="font-thin">
    <p class="my-4 w-full px-2 text-3xl tracking-wide text-gray-100">Export as a bundle</p>
    <p class="my-2 px-2 text-lg">All modules are bundled as a single JSON Schema file based on
      <a href="https://json-schema.org/draft/2020-12/json-schema-core.html#rfc.section.9.3" class="text-blue-500" target="_blank">
        Compound Documents Specification
      </a>
    </p>
    <p class="my-2 px-2 text-lg">
      Bundled schema is also a usable schema. Validator can validate the file without decomposing schema definitions into separate files.
    </p>
    <div class="flex flex-wrap py-8">
      <%= img_tag Routes.static_path(@conn, "/images/bundled.png"), alt: "exported bundle", class: "block" %>
      <div class="md:w-1/2 mx-4 py-4 md:pl-16 lg:py-0">
        <div>
          <h5 class="text-lg tracking-wider"><a href="https://ajv.js.org/" target="_blank" class="text-blue-500">AJV</a> validator</h5>
          <p class="text-sm text-gray-400">Currently AJV needs one step of decomposing files</p>

          <code class="block my-4 text-sm">
            <pre class="whitespace-pre-wrap overflow-x-scroll font-mono" style="color: burlywood">
const Ajv2020 = require("ajv/dist/2020")
let ajv = new Ajv2020()

let programSch = require("./sch.json")

for (modu of Object.keys(programSch.$defs)) {
  ajv.addSchema(programSch.$defs[modu])
  delete programSch.$defs[modu]
}

const data = { data: { values: ["a", "b"] }, mark: "arc" }
let result = ajv.validate(programSch, data)

console.log(result)
console.log(ajv.errors)
            </pre>
          </code>
        </div>
        <div>
          <h5 class="text-lg tracking-wider"><a href="https://validate.hyperjump.io/" target="_blank" class="text-blue-500">Hyperjump</a> validator</h5>

          <code class="block my-4 text-sm">
            <pre class="whitespace-pre-wrap overflow-x-scroll font-mono" style="color: burlywood">
const hpj = require("@hyperjump/json-schema")
hpj
  .get("file://./sch.json")
  .then(schema => hpj.validate(schema, { data: { values: ["a", "b"] }, mark: "arc" }))
  .then(output => console.log(output))
            </pre>
          </code>
        </div>
      </div>
    </div>
    <p class="">Simply think each <b class="font-semibold">$id</b> is a module and each of <b class="font-semibold">$defs</b> is a type, </p>
    <p>for more information see <%= link "Export documentation", to: Routes.page_path(@conn, :docs) <> "#entrypoint", class: "text-blue-500", target: "_black" %></p>
  </div>
</section>
<hr class="border-t border-pink-500 w-12 mx-auto my-12">

<%= render FsetWeb.LayoutView, "_footer.html", assigns %>
